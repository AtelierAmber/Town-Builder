<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprObjectMenu</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup instance vars
menuLevel = -1;
image_xscale = 2;
image_yscale = 2;
image_speed = 0;
display_scale = display_get_gui_width()/view_wview[view_current];
menuScale = 2.5;

//Stores all the buttons used to build objects
buildButtons[0] = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(var i = 0; i &lt; array_length_1d(buildButtons); ++i){
    with(buildButtons[i]){
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy the menu
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw on GUI
///Set correct X and Y positions
if(inputManager.left){
    menuScale -= .1;
}
if(inputManager.right){
    menuScale += .1;
}
//Update collision scale
        image_xscale = menuScale;
        image_yscale = menuScale;
var xx = (x - view_xview[0]) * display_scale;
var yy = (y - view_yview[0]) * display_scale;
draw_sprite_ext(sprObjectMenu, 0, xx, yy, menuScale, menuScale, menuLevel, c_white, 255);

if(objGame.DEBUG_DRAW){
    draw_rectangle((bbox_left - view_xview[0]) * display_scale, (bbox_top - view_yview[0]) * display_scale, (bbox_right - view_xview[0]) * display_scale, (bbox_bottom - view_yview[0]) * display_scale, true);
}

//Draw the buttons
for(var i = 0; i &lt; array_length_1d(buildButtons); ++i){
    with(buildButtons[i]){
        //Update collision scale
        image_xscale = other.menuScale;
        image_yscale = other.menuScale/1.5;
        var xx = (x - view_xview[0]) * display_scale;
        var yy = (y - view_yview[0]) * display_scale;
        //Draw button
        draw_sprite_ext(sprBuildObjectButton, sprite_index, xx, yy, other.menuScale, other.menuScale/1.5, 0, c_white, 255);
        //Draw object name
        draw_text_transformed(xx + ((sprite_get_width(sprBuildObjectButton)*other.menuScale)/2)-8*other.menuScale, 
                        yy + (((sprite_get_height(sprBuildObjectButton)*other.menuScale)/2)/1.5) - 4*other.menuScale, buildObjectName, other.menuScale/3, other.menuScale/3, 0);
        //Draw object sprite
        var buildSprite = object_get_sprite(buildObject);
        var spriteScale = ((sprite_get_height(sprBuildObjectButton) - 2) / (sprite_get_height(buildSprite))) * (other.menuScale/1.5);
        draw_sprite_ext(buildSprite, buildObjectSpriteIndex, 
                    xx + 2 + (sprite_get_xoffset(buildSprite) - sprite_get_bbox_left(buildSprite))*spriteScale, 
                    yy + sprite_get_yoffset(buildSprite)*spriteScale,
                    spriteScale, spriteScale, 0, c_white, 255);
        if(objGame.DEBUG_DRAW){
            draw_rectangle((bbox_left - view_xview[0]) * display_scale, (bbox_top - view_yview[0]) * display_scale, (bbox_right - view_xview[0]) * display_scale, (bbox_bottom - view_yview[0]) * display_scale, true);
        }
        if(showCost){
            draw_text(xx, yy + sprite_get_height(sprBuildObjectButton) * (other.menuScale/1.5), "COSTS:");
            for(i = 0; i &lt; array_length_2d(objGame.buildCosts, buildObjectCostIndex); i += 3){
                draw_text(xx, yy + sprite_get_height(sprBuildObjectButton) * (other.menuScale/1.5) + (15 * ((i/3)+1)), objGame.buildCosts[buildObjectCostIndex, i] + " " + string(objGame.buildCosts[buildObjectCostIndex, i+2]));
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
