<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup the game and user
SetupInventory();
SetupBuildCosts();
texture_set_interpolation(false);
draw_set_font(fontTEMP);
DEBUG_DRAW = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for global events

//Check for mouse out of bounds
var outerPadding = 10;
if(device_mouse_x_to_gui(0) &gt; (view_wview[view_current] - outerPadding)){
    view_xview[view_current] += outerPadding - (view_wport[view_current] - device_mouse_x_to_gui(0))/2;
}
if(device_mouse_x_to_gui(0) &lt; (view_xview[view_current] + outerPadding)){
    view_xview[view_current] -= outerPadding - (view_xport[view_current] + device_mouse_x_to_gui(0))/2;
}
if(device_mouse_y_to_gui(0) &gt; (view_hview[view_current] - outerPadding)){
    view_yview[view_current] += outerPadding - (view_hport[view_current] - device_mouse_y_to_gui(0))/2;
}
if(device_mouse_y_to_gui(0) &lt; (view_yview[view_current] + outerPadding)){
    view_yview[view_current] -= outerPadding - (view_yport[view_current] + device_mouse_y_to_gui(0))/2;
}

//Clamp camera
if(view_xview[view_current] &lt; 0){
    view_xview[view_current] = 0;
}
if(view_yview[view_current] &lt; 0){
    view_yview[view_current] = 0;
}
if((view_xview[view_current] + view_wview[view_current]) &gt; room_width){
    view_xview[view_current] = room_width - view_wview[view_current];
}
if((view_yview[view_current] + view_hview[view_current]) &gt; room_height){
    view_yview[view_current] = room_height - view_hview[view_current];
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
